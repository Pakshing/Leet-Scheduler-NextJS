// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  questions     Question[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Question {
  id             Int       @id @default(autoincrement())
  title          String
  url            String
  category       String?
  difficulty     String
  dateCreated    DateTime  @default(now())
  lastCompletion DateTime  @default(now())
  reviewDate     DateTime?
  tags           String[]  @default([])
  lastUpdated    DateTime  @default(now())
  ownerId        String
  owner          User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@unique([title, ownerId])
}

// model Profile {
//   id       Int     @id @default(autoincrement())
//   userName String?
//   user     User    @relation(fields: [userId], references: [id])
//   userId   Int     @unique
// }

// model Question {
//   id           Int      @id @default(autoincrement())
//   title        String
//   url          String
//   tags         String[]
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   reviewDate   DateTime
//   lastReviewed DateTime
//   owner        User     @relation(fields: [ownerId], references: [id])
//   ownerId      Int
// }

// model User {
//   id            Int        @id @default(autoincrement())
//   email         String     @unique
//   userId        String     @unique
//   oauthProvider String
//   questions     Question[]
//   profile       Profile?
//   createdAt     DateTime   @default(now())
//   updatedAt     DateTime   @updatedAt
// }

// model Test {
//   id   Int    @id @default(autoincrement())
//   name String
// }
